/**
 * Git commit message style
 * $kz commit
 */
const fs = require('fs-extra')
const { resolve, join } = require('path')
const execa = require('execa')
const chalk = require('chalk')
const ora = require('ora')
const inquirer = require('inquirer')
const { merge } = require('lodash')
const resolveModule = name => resolve(process.cwd(), name)

/**
 * Print the Usage
 */
function printSucceedBanner () {
  console.log()
  console.log(chalk.yellow(`üéâ  Successfully Initialize kz commit`))
  console.log(
    chalk.yellow(`üëâ  Get started with the following commands:\n\n`) +
    chalk.cyan(` ${chalk.gray('$')} npm run kz-ci\n`) +
    `   or\n` +
    chalk.cyan(` ${chalk.gray('$')} npx kz-commit\n`)
  )
  console.log()
}

/**
 * Initialize Action
 */
async function initKzCommit () {
  console.log(chalk.green('Initialize kz commit...'))
  let pkg = fs.readJsonSync('./package.json')
  console.log('ËøõÊù•ËøôÈáå')

  const { order } = await inquirer.prompt([
    {
      name: 'order',
      type: 'confirm',
      message: 'Default to pre-commit use "git add ."'
    }
  ])

  pkg = merge(pkg, {
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "src/*.js": ["eslint --fix"]
    },
    "scripts": {
      "kz-ci": (order ? "git add . && " : "") + "kz-commit"
    }
    // ,
    // "devDependencies": {
    //   "husky": "^1.2.0",
    //   "lint-staged": "^8.0.5",
    //   "@kuaizi/kz-cli-commit": "^1.0.10"
    // }
  })


  // overwrite package.json
  // fs.writeJSONSync('./package.json', pkg,{ spaces: 2 })
  fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2))
  const spinner = ora(chalk.green('Install Dependencies...')).start()

  try {
    await execa.shell('npm install husky lint-staged @kuaizi/kz-cli-commit --save-dev')
    spinner.succeed(chalk.green('Completed!'))
    printSucceedBanner()
  } catch (error) {
    spinner.fail(chalk.red(error))
  }
}

/**
 * Answer Action
 */
async function answerInitKzCommit () {
  const { initAction } = await inquirer.prompt([
    {
      name: 'initAction',
      type: 'confirm',
      message: 'Are your sure to initialize kz commit ?'
    }
  ])

  if (initAction) {
    return initKzCommit()
  } else {
    try {
      process.exit(1)
    } catch (error) {
      console.log('error', error)
    }
  }
}

/**
 * Constructor Commit
 * @param { Object } options [--init]
 * @param { Object } chalk
 */
module.exports = async (options, chalk) => {
  // Get the project's package.json
  const pkg = fs.readJsonSync('./package.json')

  // Initialize
  if (options.init) return initKzCommit()

  // It hasn't been initialized yet
  if (!pkg.scripts || (pkg.scripts && !pkg.scripts['kz-ci'])) {
    return answerInitKzCommit()
  }

  // It's has been set up
  // if (pkg.scripts['kz-ci'].startsWith('git add') && !options.force) {
  if (pkg.scripts['kz-ci'].startsWith('git add')) {
    try {
      await execa.shell('git add .')
    } catch (err) {
      console.log(chalk.red(err))
    }
  }

  console.log('Ëµ∞ËøôÈáå‰∫ÜÂêó')
  // Start to commit
  // const spinner = ora(chalk.green('kz commit is starting...')).start()
  const bootstrap = require('commitizen/dist/cli/git-cz').bootstrap

  bootstrap({
    // dev
    // cliPath: join(__dirname, './node_modules/commitizen'),
    // production
    cliPath: resolveModule('./node_modules/commitizen'),
    config: {
      // path: 'cz-conventional-changelog',
      path: 'cz-emoji'
    }
  })
}
